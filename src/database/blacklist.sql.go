// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: blacklist.sql

package database

import (
	"context"
)

const getAllBlackListDomains = `-- name: GetAllBlackListDomains :many
SELECT domain FROM dm_blacklist
`

func (q *Queries) GetAllBlackListDomains(ctx context.Context, db DBTX) ([]string, error) {
	rows, err := db.QueryContext(ctx, getAllBlackListDomains)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var domain string
		if err := rows.Scan(&domain); err != nil {
			return nil, err
		}
		items = append(items, domain)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBlackListSubnets = `-- name: GetAllBlackListSubnets :many
SELECT subnet FROM sn_blacklist
`

func (q *Queries) GetAllBlackListSubnets(ctx context.Context, db DBTX) ([]string, error) {
	rows, err := db.QueryContext(ctx, getAllBlackListSubnets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var subnet string
		if err := rows.Scan(&subnet); err != nil {
			return nil, err
		}
		items = append(items, subnet)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeBlackListDomain = `-- name: RemoveBlackListDomain :exec
DELETE FROM dm_blacklist
WHERE domain = ?1
`

func (q *Queries) RemoveBlackListDomain(ctx context.Context, db DBTX, domain string) error {
	_, err := db.ExecContext(ctx, removeBlackListDomain, domain)
	return err
}

const removeBlackListSubnet = `-- name: RemoveBlackListSubnet :exec
DELETE FROM sn_blacklist
WHERE subnet = ?1
`

func (q *Queries) RemoveBlackListSubnet(ctx context.Context, db DBTX, subnet string) error {
	_, err := db.ExecContext(ctx, removeBlackListSubnet, subnet)
	return err
}

const upsertBlackListDomain = `-- name: UpsertBlackListDomain :exec
INSERT INTO dm_blacklist (domain)
VALUES (?1)
`

func (q *Queries) UpsertBlackListDomain(ctx context.Context, db DBTX, domain string) error {
	_, err := db.ExecContext(ctx, upsertBlackListDomain, domain)
	return err
}

const upsertBlackListSubnet = `-- name: UpsertBlackListSubnet :exec
INSERT INTO sn_blacklist (subnet)
VALUES (?1)
`

func (q *Queries) UpsertBlackListSubnet(ctx context.Context, db DBTX, subnet string) error {
	_, err := db.ExecContext(ctx, upsertBlackListSubnet, subnet)
	return err
}
